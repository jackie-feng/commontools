// Code generated by goyacc -o pkg/regexp/regexp.y.go -p YoYo pkg/regexp/regexp.y. DO NOT EDIT.

//line pkg/regexp/regexp.y:2
package regexp

import __yyfmt__ "fmt"

//line pkg/regexp/regexp.y:2

//line pkg/regexp/regexp.y:5
type YoYoSymType struct {
	yys      int
	char     rune
	expr     string
	Node     Node
	And      AndNode
	Or       OrNode
	Repeated RepeatedNode
}

const CHAR = 57346

var YoYoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CHAR",
	"'*'",
	"'.'",
	"'\\\\'",
	"'|'",
	"'('",
	"')'",
}

var YoYoStatenames = [...]string{}

const YoYoEofCode = 1
const YoYoErrCode = 2
const YoYoInitialStackSize = 16

//line pkg/regexp/regexp.y:85

//line yacctab:1
var YoYoExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const YoYoPrivate = 57344

const YoYoLast = 17

var YoYoAct = [...]int8{
	9, 7, 16, 3, 9, 2, 8, 10, 11, 13,
	12, 1, 5, 15, 14, 6, 4,
}

var YoYoPact = [...]int16{
	-3, -1000, -4, -1000, 3, 6, 5, -1000, -3, -3,
	-1000, -1000, -1000, -1000, -8, -1000, -1000,
}

var YoYoPgo = [...]int8{
	0, 5, 16, 3, 15, 12, 11,
}

var YoYoR1 = [...]int8{
	0, 6, 1, 1, 3, 3, 3, 4, 4, 4,
	5, 2, 2,
}

var YoYoR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	2, 1, 3,
}

var YoYoChk = [...]int16{
	-1000, -6, -1, -3, -2, -5, -4, 4, 9, 8,
	4, 5, 4, 4, -1, -3, 10,
}

var YoYoDef = [...]int8{
	0, -2, 1, 2, 4, 5, 6, 11, 0, 0,
	7, 10, 8, 9, 0, 3, 12,
}

var YoYoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	9, 10, 5, 3, 3, 3, 6, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 7, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 8,
}

var YoYoTok2 = [...]int8{
	2, 3, 4,
}

var YoYoTok3 = [...]int8{
	0,
}

var YoYoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	YoYoDebug        = 0
	YoYoErrorVerbose = false
)

type YoYoLexer interface {
	Lex(lval *YoYoSymType) int
	Error(s string)
}

type YoYoParser interface {
	Parse(YoYoLexer) int
	Lookahead() int
}

type YoYoParserImpl struct {
	lval  YoYoSymType
	stack [YoYoInitialStackSize]YoYoSymType
	char  int
}

func (p *YoYoParserImpl) Lookahead() int {
	return p.char
}

func YoYoNewParser() YoYoParser {
	return &YoYoParserImpl{}
}

const YoYoFlag = -1000

func YoYoTokname(c int) string {
	if c >= 1 && c-1 < len(YoYoToknames) {
		if YoYoToknames[c-1] != "" {
			return YoYoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func YoYoStatname(s int) string {
	if s >= 0 && s < len(YoYoStatenames) {
		if YoYoStatenames[s] != "" {
			return YoYoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func YoYoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !YoYoErrorVerbose {
		return "syntax error"
	}

	for _, e := range YoYoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + YoYoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(YoYoPact[state])
	for tok := TOKSTART; tok-1 < len(YoYoToknames); tok++ {
		if n := base + tok; n >= 0 && n < YoYoLast && int(YoYoChk[int(YoYoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if YoYoDef[state] == -2 {
		i := 0
		for YoYoExca[i] != -1 || int(YoYoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; YoYoExca[i] >= 0; i += 2 {
			tok := int(YoYoExca[i])
			if tok < TOKSTART || YoYoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if YoYoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += YoYoTokname(tok)
	}
	return res
}

func YoYolex1(lex YoYoLexer, lval *YoYoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(YoYoTok1[0])
		goto out
	}
	if char < len(YoYoTok1) {
		token = int(YoYoTok1[char])
		goto out
	}
	if char >= YoYoPrivate {
		if char < YoYoPrivate+len(YoYoTok2) {
			token = int(YoYoTok2[char-YoYoPrivate])
			goto out
		}
	}
	for i := 0; i < len(YoYoTok3); i += 2 {
		token = int(YoYoTok3[i+0])
		if token == char {
			token = int(YoYoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(YoYoTok2[1]) /* unknown char */
	}
	if YoYoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", YoYoTokname(token), uint(char))
	}
	return char, token
}

func YoYoParse(YoYolex YoYoLexer) int {
	return YoYoNewParser().Parse(YoYolex)
}

func (YoYorcvr *YoYoParserImpl) Parse(YoYolex YoYoLexer) int {
	var YoYon int
	var YoYoVAL YoYoSymType
	var YoYoDollar []YoYoSymType
	_ = YoYoDollar // silence set and not used
	YoYoS := YoYorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	YoYostate := 0
	YoYorcvr.char = -1
	YoYotoken := -1 // YoYorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		YoYostate = -1
		YoYorcvr.char = -1
		YoYotoken = -1
	}()
	YoYop := -1
	goto YoYostack

ret0:
	return 0

ret1:
	return 1

YoYostack:
	/* put a state and value onto the stack */
	if YoYoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", YoYoTokname(YoYotoken), YoYoStatname(YoYostate))
	}

	YoYop++
	if YoYop >= len(YoYoS) {
		nyys := make([]YoYoSymType, len(YoYoS)*2)
		copy(nyys, YoYoS)
		YoYoS = nyys
	}
	YoYoS[YoYop] = YoYoVAL
	YoYoS[YoYop].yys = YoYostate

YoYonewstate:
	YoYon = int(YoYoPact[YoYostate])
	if YoYon <= YoYoFlag {
		goto YoYodefault /* simple state */
	}
	if YoYorcvr.char < 0 {
		YoYorcvr.char, YoYotoken = YoYolex1(YoYolex, &YoYorcvr.lval)
	}
	YoYon += YoYotoken
	if YoYon < 0 || YoYon >= YoYoLast {
		goto YoYodefault
	}
	YoYon = int(YoYoAct[YoYon])
	if int(YoYoChk[YoYon]) == YoYotoken { /* valid shift */
		YoYorcvr.char = -1
		YoYotoken = -1
		YoYoVAL = YoYorcvr.lval
		YoYostate = YoYon
		if Errflag > 0 {
			Errflag--
		}
		goto YoYostack
	}

YoYodefault:
	/* default state action */
	YoYon = int(YoYoDef[YoYostate])
	if YoYon == -2 {
		if YoYorcvr.char < 0 {
			YoYorcvr.char, YoYotoken = YoYolex1(YoYolex, &YoYorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if YoYoExca[xi+0] == -1 && int(YoYoExca[xi+1]) == YoYostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			YoYon = int(YoYoExca[xi+0])
			if YoYon < 0 || YoYon == YoYotoken {
				break
			}
		}
		YoYon = int(YoYoExca[xi+1])
		if YoYon < 0 {
			goto ret0
		}
	}
	if YoYon == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			YoYolex.Error(YoYoErrorMessage(YoYostate, YoYotoken))
			Nerrs++
			if YoYoDebug >= 1 {
				__yyfmt__.Printf("%s", YoYoStatname(YoYostate))
				__yyfmt__.Printf(" saw %s\n", YoYoTokname(YoYotoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for YoYop >= 0 {
				YoYon = int(YoYoPact[YoYoS[YoYop].yys]) + YoYoErrCode
				if YoYon >= 0 && YoYon < YoYoLast {
					YoYostate = int(YoYoAct[YoYon]) /* simulate a shift of "error" */
					if int(YoYoChk[YoYostate]) == YoYoErrCode {
						goto YoYostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if YoYoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", YoYoS[YoYop].yys)
				}
				YoYop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if YoYoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", YoYoTokname(YoYotoken))
			}
			if YoYotoken == YoYoEofCode {
				goto ret1
			}
			YoYorcvr.char = -1
			YoYotoken = -1
			goto YoYonewstate /* try again in the same state */
		}
	}

	/* reduction by production YoYon */
	if YoYoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", YoYon, YoYoStatname(YoYostate))
	}

	YoYont := YoYon
	YoYopt := YoYop
	_ = YoYopt // guard against "declared and not used"

	YoYop -= int(YoYoR2[YoYon])
	// YoYop is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if YoYop+1 >= len(YoYoS) {
		nyys := make([]YoYoSymType, len(YoYoS)*2)
		copy(nyys, YoYoS)
		YoYoS = nyys
	}
	YoYoVAL = YoYoS[YoYop+1]

	/* consult goto table to find next state */
	YoYon = int(YoYoR1[YoYon])
	YoYog := int(YoYoPgo[YoYon])
	YoYoj := YoYog + YoYoS[YoYop].yys + 1

	if YoYoj >= YoYoLast {
		YoYostate = int(YoYoAct[YoYog])
	} else {
		YoYostate = int(YoYoAct[YoYoj])
		if int(YoYoChk[YoYostate]) != -YoYon {
			YoYostate = int(YoYoAct[YoYog])
		}
	}
	// dummy call; replaced with literal code
	switch YoYont {

	case 1:
		YoYoDollar = YoYoS[YoYopt-1 : YoYopt+1]
//line pkg/regexp/regexp.y:25
		{
			SetResult(YoYoDollar[1].Node)
		}
	case 2:
		YoYoDollar = YoYoS[YoYopt-1 : YoYopt+1]
//line pkg/regexp/regexp.y:31
		{
			YoYoVAL.Node = YoYoDollar[1].Node
		}
	case 3:
		YoYoDollar = YoYoS[YoYopt-3 : YoYopt+1]
//line pkg/regexp/regexp.y:35
		{
			YoYoVAL.Node = OrNode{Left: YoYoDollar[1].Node, Right: YoYoDollar[3].Node}
		}
	case 4:
		YoYoDollar = YoYoS[YoYopt-1 : YoYopt+1]
//line pkg/regexp/regexp.y:41
		{
			YoYoVAL.Node = YoYoDollar[1].Node
		}
	case 5:
		YoYoDollar = YoYoS[YoYopt-1 : YoYopt+1]
//line pkg/regexp/regexp.y:45
		{
			YoYoVAL.Node = YoYoDollar[1].Repeated
		}
	case 6:
		YoYoDollar = YoYoS[YoYopt-1 : YoYopt+1]
//line pkg/regexp/regexp.y:49
		{
			YoYoVAL.Node = YoYoDollar[1].And
		}
	case 7:
		YoYoDollar = YoYoS[YoYopt-2 : YoYopt+1]
//line pkg/regexp/regexp.y:56
		{
			YoYoVAL.And = AndNode{Left: YoYoDollar[1].Node, Right: YoYoDollar[2].char}
		}
	case 8:
		YoYoDollar = YoYoS[YoYopt-2 : YoYopt+1]
//line pkg/regexp/regexp.y:60
		{
			YoYoVAL.And = AndNode{Left: YoYoDollar[1].Repeated, Right: YoYoDollar[2].char}
		}
	case 9:
		YoYoDollar = YoYoS[YoYopt-2 : YoYopt+1]
//line pkg/regexp/regexp.y:64
		{
			YoYoVAL.And = AndNode{Left: YoYoDollar[1].And, Right: YoYoDollar[2].char}
		}
	case 10:
		YoYoDollar = YoYoS[YoYopt-2 : YoYopt+1]
//line pkg/regexp/regexp.y:71
		{
			YoYoVAL.Repeated = RepeatedNode{Val: YoYoDollar[1].Node}
		}
	case 11:
		YoYoDollar = YoYoS[YoYopt-1 : YoYopt+1]
//line pkg/regexp/regexp.y:77
		{
			YoYoVAL.Node = YoYoDollar[1].char
		}
	case 12:
		YoYoDollar = YoYoS[YoYopt-3 : YoYopt+1]
//line pkg/regexp/regexp.y:81
		{
			YoYoVAL.Node = YoYoDollar[2].Node
		}
	}
	goto YoYostack /* stack new state and value */
}
